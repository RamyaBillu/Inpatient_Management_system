package com.patient.billing.service.controller;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.patient.billing.service.bean.BedAllocationBean;
import com.patient.billing.service.bean.PatientBillingBean;
import com.patient.billing.service.dto.BedAllocationDto;
import com.patient.billing.service.dto.PatientBillingDTO;
import com.patient.billing.service.entity.PatientBillingEntity;
import com.patient.billing.service.exception.BillingDetailsNotFoundException;
import com.patient.billing.service.exception.PatientNumberNotFoundException;
import com.patient.billing.service.service.PatientBillingService;

@RestController
public class PatientBillingController {
	@Autowired

	private PatientBillingService patientBillingService;

	private static Logger log = LoggerFactory.getLogger(PatientBillingController.class.getSimpleName());

	@PostMapping(path = "/save")
	public ResponseEntity<BedAllocationDto> save(@RequestBody BedAllocationDto patientBillingBean) {
		System.out.println("controller");
		log.info("billing save method{}" + patientBillingBean);
		patientBillingService.save(patientBillingBean);
		return new ResponseEntity<BedAllocationDto>(patientBillingBean, HttpStatus.OK);
	}

	@GetMapping(path = "/get")
	public ResponseEntity<List<PatientBillingDTO>> getAlldeatils() {
		log.info("billing getById method{}");
		try {
			Optional<List<PatientBillingDTO>> patientBillingEntity = patientBillingService.getAllDetails();
			return new ResponseEntity(patientBillingEntity, HttpStatus.OK);
		} catch (BillingDetailsNotFoundException e) {
			log.error("billing details not found");
			return new ResponseEntity(HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/filter")
	public ResponseEntity<Optional<List<PatientBillingDTO>>> filterByDateRange(
			@RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
			@RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
		try {
			log.info(" getting the billing details based on start date and end date");
			if (endDate == null) {
				endDate = LocalDate.now();
			}
			Optional<List<PatientBillingDTO>> result = patientBillingService.filterByDateRange(startDate, endDate);
			log.info(" get billing details based on start date and end date sucessfully");
			return new ResponseEntity<Optional<List<PatientBillingDTO>>>(result, HttpStatus.OK);

		} catch (BillingDetailsNotFoundException e) {
			log.error("billing details not found");
			return new ResponseEntity<Optional<List<PatientBillingDTO>>>(HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/getno")
	public ResponseEntity<Optional<BedAllocationDto>> getAllDetails(@RequestParam String patientNumber) {
		try {
			log.error("getting details based on patient number");
			Optional<BedAllocationDto> bedDetails = patientBillingService.getByPatientNo(patientNumber);
			log.error("get the details based on patient number sucessfully");
			return new ResponseEntity<Optional<BedAllocationDto>>(bedDetails, HttpStatus.OK);
		} catch (PatientNumberNotFoundException e) {
			log.error("Patient number not found");
			return new ResponseEntity<Optional<BedAllocationDto>>(HttpStatus.NOT_FOUND);

		}
	}

}
