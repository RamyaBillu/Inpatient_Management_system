package com.admin.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.admin.bean.BedAllocationBean;
import com.admin.bean.PatientBean;
import com.admin.dto.BedAllocationDto;
import com.admin.entity.BedAllocation;
import com.admin.exception.RecordNotFoundException;
import com.admin.service.BedAllocationService;

@RestController
@RequestMapping(path = "bedAllocation")
public class BedAllocationController {

	@Autowired
	BedAllocationService bedAllocationService;
	private static Logger log = LoggerFactory.getLogger(BedAllocationController.class.getSimpleName());

	@PostMapping("/save")
	public ResponseEntity<BedAllocationBean> save(@RequestBody BedAllocationBean bedAllocationBean) {
		log.info("Saving BedAllocation");
		try {
			BedAllocationBean bedAllocation1 = bedAllocationService.save(bedAllocationBean);
			ResponseEntity<BedAllocationBean> responseEntity = new ResponseEntity<>(bedAllocation1, HttpStatus.CREATED);
			log.info("Saving BedAllocation is done");
			return responseEntity;
		} catch (Exception e) {
			log.error("error handled");
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}

	}

	@GetMapping("/getPatientById/{id}")
	public ResponseEntity<PatientBean> details(@PathVariable(value = "id") Integer patientId) {
		log.info("Getting Patient Details by Id");
		PatientBean patientBillingBean = bedAllocationService.getDetails(patientId);
		log.info("Getting Patient Details by Id is done");
		return new ResponseEntity<PatientBean>(patientBillingBean, HttpStatus.OK);

	}

	@GetMapping("/getById/{id}")
	public ResponseEntity<BedAllocationBean> getById(@PathVariable int id) {
		log.info("Getting BedAllocation Details by Id");
		BedAllocationBean bedAllocation = bedAllocationService.getById(id);
		log.info("Getting BedAllocation Details by Id is done");
		return new ResponseEntity<BedAllocationBean>(bedAllocation, HttpStatus.OK);

	}

	@GetMapping("/getAll")
	public ResponseEntity<List<BedAllocationBean>> getAll() {
		log.info("Getting  All BedAllocation Details");

		List<BedAllocationBean> list = bedAllocationService.getAll();
		ResponseEntity<List<BedAllocationBean>> responseEntity = new ResponseEntity<>(list, HttpStatus.OK);
		log.info("Getting  All BedAllocation Details is done");
		return responseEntity;

	}

	@GetMapping("/getByPatientNumber/{no}")
	public ResponseEntity<BedAllocation> getByPatientNumber(@PathVariable String no) {
		log.info("get  BedAllocation by using patient number");
		BedAllocation bedAllocation = bedAllocationService.getDetailsForUpdating(no);
		log.info("get  BedAllocation by using patient number id done");
		return new ResponseEntity<BedAllocation>(bedAllocation, HttpStatus.OK);
	}

	@DeleteMapping("/deleteById/{id}")
	public ResponseEntity<String> deleteById(@PathVariable int id) {
		log.info("Deleting BedAllocation By Id");
		try {
			bedAllocationService.getById(id);
			bedAllocationService.delete(id);
			ResponseEntity<String> responseEntity = new ResponseEntity<>("Deleted Successfully", HttpStatus.OK);
			log.info("Deleting BedAllocation By Id is done");
			return responseEntity;
		} catch (RecordNotFoundException e) {
			log.error("error handled");
			return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
	}

	@PutMapping("/updateById/{id}")
	public ResponseEntity<String> put(@RequestBody BedAllocationBean bedAllocationBean, @PathVariable int id)
			throws Exception {

		log.info("Updating BedAllocation");
		try {
			BedAllocationBean bedAllocation1 = bedAllocationService.getById(id);
			if (bedAllocation1 != null) {

				bedAllocation1.setId(bedAllocationBean.getId());
				bedAllocation1.setStartDate(bedAllocationBean.getStartDate());
				bedAllocation1.setEndDate(bedAllocationBean.getEndDate());
				bedAllocation1.setStatus(bedAllocationBean.getStatus());
				bedAllocation1.setBedId(bedAllocationBean.getBedId());
				bedAllocation1.setNoOfDays(bedAllocationBean.getNoOfDays());
				bedAllocation1.setPatientId(bedAllocationBean.getPatientId());
				bedAllocationService.save(bedAllocation1);
			}
			ResponseEntity<String> responseEntity = new ResponseEntity<>("Updated successfully", HttpStatus.OK);
			log.info("Updating BedAllocation is done");
			return responseEntity;
		} catch (RecordNotFoundException e) {
			log.error("error handled");
			return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/bed")
	public ResponseEntity<List<BedAllocationDto>> getDetails() {
		log.info("get the BedAllocation details");
		List<BedAllocationDto> bedDetails = bedAllocationService.getBedDetails();
		log.info("getting the BedAllocation details done");
		return new ResponseEntity<List<BedAllocationDto>>(bedDetails, HttpStatus.OK);
	}
}
