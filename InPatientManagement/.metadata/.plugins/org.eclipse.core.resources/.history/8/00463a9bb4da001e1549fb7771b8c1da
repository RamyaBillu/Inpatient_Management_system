package com.patient.serviceImplementation;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.patient.bean.DoctorBean;
import com.patient.constants.CommonConstants;
import com.patient.entity.DoctorEntity;
import com.patient.exception.PatientIdNotFoundException;
import com.patient.repository.DoctorRepository;
import com.patient.service.DoctorService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

@Service
public class DoctorServiceImplementation implements DoctorService{
	
	@Autowired
	DoctorRepository doctorRepository;
	@PersistenceContext
    private EntityManager entityManager;
    ObjectMapper objectMapper=new ObjectMapper();
	@Override
	public DoctorBean save(DoctorBean doctorBean) {
		// TODO Auto-generated method stub
		DoctorEntity doctorEntity=new DoctorEntity();
		doctorBean.setStatus("Active");
		BeanToEntity(doctorBean, doctorEntity);
		doctorRepository.save(doctorEntity);
		return doctorBean;
	}

	private void BeanToEntity(DoctorBean doctorBean, DoctorEntity doctorEntity) {
		// TODO Auto-generated method stub
		doctorEntity = objectMapper.convertValue(doctorBean, DoctorEntity.class);
	}

	@Override
	public DoctorBean getById(long id) {
		// TODO Auto-generated method stub

		DoctorEntity doctorEntity= doctorRepository.findById(id).orElseThrow(()->new PatientIdNotFoundException("No record found with the given id"));
		DoctorBean doctorBean=new DoctorBean();
		
		entityToBean(doctorEntity, doctorBean);

		return doctorBean;	
	}

	private void entityToBean(DoctorEntity doctorEntity, DoctorBean doctorBean) {
		// TODO Auto-generated method stub
		doctorBean = objectMapper.convertValue(doctorEntity, DoctorBean.class);
	}

	@Override
	public List<DoctorBean> getAll() {
		// TODO Auto-generated method stub
		List<DoctorBean> doctorBean=new ArrayList<>();
	    List<DoctorEntity>	doctorEntity=doctorRepository.findAll();
        entityToBean(doctorEntity,doctorBean);
		return doctorBean;
	}

	private void entityToBean(List<DoctorEntity> doctorEntity, List<DoctorBean> doctorBean) {
		// TODO Auto-generated method stub
		for(DoctorEntity doctorEntity1:doctorEntity)
		{  
			DoctorBean doctorBean1=new DoctorBean();
			entityToBean(doctorEntity1, doctorBean1);
			doctorBean.add(doctorBean1);
		}
	}

	@Override
	public void delete(Long id) {
		// TODO Auto-generated method stub
		doctorRepository.deleteById(id);
	}

	@Override
	public void update(DoctorBean doctorbean) {
		// TODO Auto-generated method stub

		DoctorEntity doctorEntity=doctorRepository.getReferenceById(doctorbean.getId());

			//DoctorBean doctorBean=new DoctorBean();
			doctorEntity.setId(doctorbean.getId());
			doctorEntity.setName(doctorbean.getName());
			doctorEntity.setDepartmentId(doctorbean.getDepartmentId());
			doctorEntity.setStatus(doctorbean.getStatus());
			doctorRepository.save(doctorEntity);
	}

	@Override
	public void updateStatus(DoctorEntity doctor) {
		// TODO Auto-generated method stub
		if (doctor.getStatus().equalsIgnoreCase(CommonConstants.Active)) {
			doctor.setStatus(CommonConstants.InActive);
		} else {
			doctor.setStatus(CommonConstants.Active);
		}
		doctorRepository.save(doctor);

	}
	

	@Override
	public List<Object[]> getAllWithDept() {
		// TODO Auto-generated method stub
		String sqlQuery ="SELECT d.doctor_name,d.status,dp.department_name FROM doctor d\r\n"
				+ "JOIN department dp ON d.department_id = dp.dept_id";
		 List<Object[]> resultList = entityManager.createNativeQuery(sqlQuery)
	                .getResultList();
		 
		 return resultList;
	}

}
