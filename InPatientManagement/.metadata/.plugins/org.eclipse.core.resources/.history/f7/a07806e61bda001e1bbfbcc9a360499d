package com.admin.service.implementation;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.bean.DepartmentBean;
import com.admin.constants.CommonConstants;
import com.admin.entity.Department;
import com.admin.exception.RecordNotFoundException;
import com.admin.repository.DepartmentRepository;
import com.admin.service.DepartmentService;

@Service
public class DepartmentServiceImpl implements DepartmentService {

	@Autowired
	DepartmentRepository departmentRepository;

	@Override
	public DepartmentBean save(DepartmentBean departmentBean) {

		// TODO Auto-generated method stub
		Department department = new Department();
		Department dept = departmentRepository.getByName(departmentBean.getName());
		if (dept == null) {
			beanToEntity(departmentBean, department);
			department.setStatus("Active");
			departmentRepository.save(department);
		} else {
			throw new RecordNotFoundException("Department already exists");
		}

		return departmentBean;
	}

	@Override
	public DepartmentBean getById(long id) {
		// TODO Auto-generated method stub
		Department department = departmentRepository.findById(id)
				.orElseThrow(() -> new RecordNotFoundException("No Record Found with given id"));
		DepartmentBean departmentBean = new DepartmentBean();
		entityToBean(department, departmentBean);
		return departmentBean;
	}

	@Override
	public List<DepartmentBean> getAll() {
		// TODO Auto-generated method stub
		List<Department> list = departmentRepository.findAll();
		List<DepartmentBean> beanList = new ArrayList<DepartmentBean>();
		entityToBean(list, beanList);
		return beanList;

	}

	@Override
	public void delete(long id) {
		// TODO Auto-generated method stub
		departmentRepository.findById(id)
				.orElseThrow(() -> new RecordNotFoundException("No Record Found with given id"));
		departmentRepository.deleteById(id);

	}

	public void beanToEntity(DepartmentBean departmentBean, Department department) {
		department.setId(departmentBean.getId());
		department.setName(departmentBean.getStatus());
		department.setName(departmentBean.getName());

	}

	public void entityToBean(Department department, DepartmentBean departmentBean) {
		departmentBean.setId(department.getId());
		departmentBean.setStatus(department.getStatus());
		departmentBean.setName(department.getName());
	}

	public void entityToBean(List<Department> list, List<DepartmentBean> beanList) {

		for (Department department : list) {
			DepartmentBean departmentBean = new DepartmentBean();
			departmentBean.setId(department.getId());
			departmentBean.setStatus(department.getStatus());
			departmentBean.setName(department.getName());
			beanList.add(departmentBean);
		}

	}

	@Override
	public void updateStatus(Department department) {
		if (department.getStatus().equalsIgnoreCase(CommonConstants.Active)) {
			department.setStatus(CommonConstants.InActive);
		} else {
			department.setStatus(CommonConstants.Active);
		}

		departmentRepository.save(department);

	}
}
