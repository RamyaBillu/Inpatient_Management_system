package com.admin.service.implementation;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.bean.DepartmentBean;
import com.admin.bean.RoomBean;
import com.admin.bean.RoomTypeBean;
import com.admin.bean.WardBean;
import com.admin.entity.Department;
import com.admin.entity.RegistrationForm;
import com.admin.entity.RoomEntity;
import com.admin.entity.RoomType;
import com.admin.entity.Ward;
import com.admin.exception.RecordNotFoundException;
import com.admin.exception.RoomAlreadyExistsException;
import com.admin.exception.WardCapacityExceededException;
import com.admin.repository.RoomRepository;
import com.admin.service.RoomService;
import com.fasterxml.jackson.databind.ObjectMapper;
@Service
public class RoomServiceImplementation implements RoomService {

	@Autowired
	RoomRepository roomRepository;
	ObjectMapper objectMapper = new ObjectMapper();
	@Override
	public void save(RoomBean roomBean) {
		RoomEntity roomEntity1=roomRepository.getByRoomNoAndWardId_Id(roomBean.getRoomNo(), roomBean.getWardId().getId());
        if(roomEntity1==null) {
		roomBean.setStatus("Active");
		roomBean.setAvailability(roomBean.getRoomSharing());
		WardBean ward = roomBean.getWardId();
		Integer totalRoomSharing = roomRepository.sumRoomSharingByWard(ward.getId());
		if (totalRoomSharing == null) {
			totalRoomSharing = 0;
		}
		if (totalRoomSharing + roomBean.getRoomSharing() <= ward.getCapacity()) {
			RoomEntity roomEntity = new RoomEntity();
			beanToEntity(roomEntity, roomBean);
			roomRepository.save(roomEntity);
		} else {
			throw new WardCapacityExceededException("Room capacity exceeded for ward");
		}
      }
       else {
    	   throw new RoomAlreadyExistsException("That room already exists");
       }

	}

	@Override
	public List<RoomBean> getAll() {
		List<RoomBean> roomBean = new ArrayList<>();
		List<RoomEntity> roomEntity = roomRepository.findAll();
		entityToBean(roomEntity, roomBean);
		return roomBean;
	}

	@Override
	public RoomBean getById(long id) {
		RoomBean roomBean = new RoomBean();
		RoomEntity roomEntity = roomRepository.findById(id)
				.orElseThrow(() -> new RecordNotFoundException("record not found"));
		entityToBean(roomEntity, roomBean);
		return roomBean;

	}

	@Override
	public RoomBean update(long id) {
		RoomEntity room = roomRepository.findById(id)
				.orElseThrow(() -> new RecordNotFoundException("record not found"));
		RoomBean roomBean = new RoomBean();
		entityToBean(room, roomBean);
		return roomBean;

	}

	@Override
	public void delete(long id) {
		roomRepository.deleteById(id);

	}

	public void beanToEntity(RoomEntity roomEntity, RoomBean roomBean) {
		roomEntity = objectMapper.convertValue(roomBean, RoomEntity.class);
	}



	public void entityToBean(List<RoomEntity> listEntity, List<RoomBean> listbean) {

		for (RoomEntity roomEntity : listEntity) {
			RoomBean roomBean = new RoomBean();
			roomBean = objectMapper.convertValue(roomEntity, RoomBean.class);
			listbean.add(roomBean);
		}
	}

	public void entityToBean(RoomEntity roomEntity, RoomBean roomBean) {

		roomBean = objectMapper.convertValue(roomEntity, RoomBean.class);

	}


	@Override
	public List<RoomEntity> findByWardId(Long wardId) {
		// TODO Auto-generated method stub
		return roomRepository.findByWardId_Id(wardId);
	}

	@Override
	public void updateStatus(RoomEntity roomEntity) {
		
		roomEntity.setStatus("InActive");
		roomRepository.save(roomEntity);
			
	}
}
